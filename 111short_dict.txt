Типы данных

int Целые числа: 1, -5, -200000, 485487389, 0

float Числа с плавающей точкой: 1.25, -0.89789623

complex Комплексные числа, состоящие из вещественной и мнимой частей:
1 + 2j, 0.4 + 0.88j

bytes Байты: b’\x00\x00\x00’

bool Булевы (логические) значения: True, False

NoneType Нейтральное пустое значение: None

str Строка (последовательность символов): ‘abc’, ‘a1d3#$%’, ‘qwertyuio’

list Коллекция из нескольких элементов, обращаться к которым можно по индексам:
[1, 2, 3], [‘a’, ‘b’, ‘c’], [1, ‘a’, ‘c’]

set Изменяемое множество уникальных значений: (1, 2, 3), (‘a’, ‘b’, ‘c’, 1, 5)

tuple Неизменяемое множество уникальных значений:
(1, 2, 3), (‘a’, ‘b’, ‘c’, 1, 5)

dict Коллекция пар ключ-значение: {‘key_a’: ‘value_a’, ‘key_b’: ‘value_b’}

range Диапазон значений: range(0, 6) -> 0, 1, 2, 3, 4, 5

Классификация типов данных

Неизменяемые (immutable):
- целые и действительные числа (int, float)
- строки (str)
- последовательности байтов (бинарные данные, bytes)
- кортежи (tuple)

Изменяемые (mutable):
- списки (list)
- словари (dict)
- множества (set)

Операторы, операнды, операции

Операция – некоторое действие
Оператор – символ (реже – слово), выполняющий соответствующую операцию
Операнд – то, над чем выполняется операция.
Например, в выражении 2 + 3:
Операнды: 2 и 3
Операция: сложение
Оператор: знак +

Арифметические операторы
+ 	операция сложения
- 	операция вычитания
* 	операция умножения
/ 	операция деления (5 / 2 – будет 2.5)
% 	операция получения остатка (7 % 2 – будет 1)
// 	операция целочисленного деления (13 // 2 – будет 6)
** 	операция возведения в степень (2 ** 3 – будет 8)


Форматирование строк с помощью оператора %

То, что стоит после знака %, называется спецификатором формата. Синтаксис использования
спецификатора формата выглядит следующим образом:
%[(name)][flags][width][.precision]code
name – ключ в словаре
flags – перечень флажков (например, для задания выравнивания или наличия начальных нулей)
width – ширина поля для представления строки
.precision – количество знаков после запятой
code – символ спецификатора формата. Он определяет, каким образом представлять данные.
%d Десятичное целое число
%i Целое число
%o Восьмеричное число
%x, %X Шестнадцатеричное число (меняется регистр)
%e, %E Вещественное число в экспоненциальной форме
%f, %F Вещественное число в десятичном представлении
%g, %G Вещественное число с экспонентой, если она меньше, чем -4 или точности
%r Строка, используется repr(x)
%s Строка, используется str(x)
%c Символ (строка из одного символа или число – код символа)
%% Символ %


Операторы сравнения
= = проверяет, равен ли левый операнд правому
!= проверяет неравенство левого операнда правому
> проверяет, больше ли левый операнд, чем правый
< проверяет, меньше ли левый операнд, чем правый
>= проверяет, больше ли левый операнд, чем правый, или они равны
<= проверяет, меньше ли левый операнд, чем правый, или они равны
is проверяет тождественное равенство – находятся ли два значения по одному адресу в памяти.

Оператор if
Если логическое выражение истинно (принимает значение true), то выполняется <Оператор 1>.
Впротивном случае выполняется <Оператор 2>.
if <Логическое выражение>:
<Оператор 1>
else:
<Оператор 2>

Тернарный оператор
<Команда (true)>   if   <Условие>   else   <Команда (false)>

Циклы
    Выполнение программ по умолчанию является последовательным, но иногда выполнение определенной части кода
может потребоваться повторить несколько раз. Для этого в языках программирования предусмотрены различные типы
циклов, которые способны повторять определенный код несколько раз.
При использовании циклов нам не нужно самим повторять части кода несколько раз, нужно лишь задать условие для
повторения.
Классификация циклов
    В соответствии со взаимным расположением циклов в теле программы или алгоритма различают следующие циклы:
простые – циклы, не содержащие внутри себя других циклов;
сложные – циклы, содержащие внутри себя другие циклы;
вложенные (внутренние) – циклы, входящие в состав других циклов (цикл в цикле);
внешние – циклы, не являющиеся составной частью других циклов, но содержащие в своем составе внутренние циклы.

Цикл while
Цикл while используется в тех случаях, когда мы заранее не знаем точное число повторений. Он также известен
как цикл с предварительной проверкой условия.

while <Логическое выражение>:
<Блок команд>
Весь процесс цикла можно представить так:
    сначала проверяется значение переменной – больше ли оно, чем 0. Если пользователь ввел неотрицательное
число, то проверка вернет True, и начнут выполняться инструкции цикла.

Цикл for
Цикл for используется в тех случаях, когда мы заранее знаем точное число повторений.
При выполнении цикла Python последовательно получает значения из набора и передаёт их в переменную. Когда все
значения из набора будут перебраны, цикл завершает свою работу.

for <Переменная> in <Набор значений>:
<Блок команд>
Цикл for – функция range()
Функция range() используется для генерации последовательности чисел. Если мы напишем range(10), будут
сгенерированы числа от 0 до 9 (всего 10 штук).
Синтаксис функции range():
range(start, stop, step)
Оператор continue
Оператор continue переходит к следующей итерации цикла, минуя оставшиеся команды в теле цикла.
Оператор break
Оператор break досрочно прерывает цикл. Оставшиеся итерации выполнены не будут.
Использование ветки else в данном случае не имеет смысла, т.к. мы не дойдем до конца итераций.

